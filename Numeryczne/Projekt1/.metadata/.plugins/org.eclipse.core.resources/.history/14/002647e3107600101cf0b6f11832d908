import javax.swing.*;

import java.awt.Color;
import java.awt.event.*;
import java.io.*;
import java.util.*;


public class GUI {
	// INNE
	private double[][] matDou;
	private double[] vecDou;
	private SystemHelper helper;
	
	//SWINGOWE
	private JFrame frame;
	private JPanel panel;
	private JPanel mastaPanel;
	private JFileChooser chooser;
	private JButton openButton;
	private File openFile;
	private JTextField fileNameTF;
	private ArrayList<JPanel> panelArray;
	private JPanel temp;
	private JTextArea instructionsTA;
	private JTextArea inputMatrixTA;
	private JTextArea inputVectorTA;
	private JScrollPane inputMatrixScroller;
	private JScrollPane inputVectorScroller;
	private JButton calcButton;
	private JTextArea outputMatrixTA;
	private JTextArea outputVectorTA;
	private JScrollPane outputMatrixScroller;
	private JScrollPane outputVectorScroller;
	private JPanel bigPanel;
	private JButton saveButton;
	private JCheckBox[] formatJCB;
	private JLabel formatLabel;
	
	
	public void go(){
		//FRAME I GL PANEL
		frame = new JFrame("Cholesky Banachiewicz Liczenie ukladow");
		mastaPanel = new JPanel();
		panel = new JPanel();
		panel.setLayout(new BoxLayout(panel,BoxLayout.Y_AXIS));
		panelArray = new ArrayList<JPanel>();
		
		//OTWIERANIE PLIKU
		openButton = new JButton("Otworz plik");
		openButton.addActionListener(new OpenButtonActionListener());
		
		fileNameTF = new JTextField(15);
		fileNameTF.setEditable(false);
		
		
		// INSTRUKCJE DLA USERA
		temp = new JPanel();
		instructionsTA = new JTextArea();
		instructionsTA.setEditable(false);
		instructionsTA.setText("Potrzebny jest plik .txt. \nMacierz podana z rozdzieleniem wierszy \";\" i elementow \",\" po czym rozdzielona od wektora wynikowego \"&\".\nMacierz musi byc dodatnio okreslona i symetryczna.");
		temp.add(instructionsTA);
		panelArray.add(temp);
		
		
		//PANEL OTWIERANIA
		temp = new JPanel();
		temp.add(openButton);
		temp.add(fileNameTF);
		panelArray.add(temp);
		
		

		
		//SEKCJA WYSWIETLANIA MACIERZY I WEKTORA
		inputMatrixTA=new JTextArea(20,20);
		inputMatrixTA.setEditable(false);
		inputVectorTA=new JTextArea(20,6);
		inputVectorTA.setEditable(false);
		inputMatrixScroller = new JScrollPane(inputMatrixTA);
		inputVectorScroller = new JScrollPane(inputVectorTA);
		inputMatrixScroller.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
		inputVectorScroller.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
		inputMatrixScroller.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
		inputVectorScroller.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
		inputMatrixScroller.setBorder(null);
		inputVectorScroller.setBorder(null);

		temp = new JPanel();
		temp.add(inputMatrixScroller);
		temp.add(inputVectorScroller);
		bigPanel=new JPanel();
		bigPanel.add(temp);
		panelArray.add(bigPanel);
	
		
		// JCB DO WYSWIETLANIA
		temp = new JPanel();
		formatLabel = new JLabel("Wybierz format wynikow\n(bez wplywu na format wynikow zapisywanych do pliku) ");
		formatJCB = new JCheckBox[3];
		formatJCB[0] = new JCheckBox(" .2 ");
		formatJCB[0].setSelected(true);
		formatJCB[0].addActionListener(new JCBOneItemListener());
		formatJCB[1] = new JCheckBox(" .4 ");
		formatJCB[1].addActionListener(new JCBTwoItemListener());
		formatJCB[2] = new JCheckBox(" full ");
		formatJCB[2].addActionListener(new JCBThreeActionListener());
		
		temp.add(formatLabel);
		for(JCheckBox j:formatJCB){
			temp.add(j);
		}
		panelArray.add(temp);
		
		//panel na guziczek do liczenia
		calcButton = new JButton("Policz to");
		calcButton.addActionListener(new CalcButtonActionListener());
		temp = new JPanel();
		temp.add(calcButton);
		panelArray.add(temp);
		
		//PANEL Z WYNIKAMI
		outputMatrixTA=new JTextArea(20,20);
		outputMatrixTA.setEditable(false);
		outputVectorTA=new JTextArea(20,6);
		outputVectorTA.setEditable(false);
		outputMatrixScroller = new JScrollPane(outputMatrixTA);
		outputVectorScroller = new JScrollPane(outputVectorTA);
		outputMatrixScroller.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
		outputVectorScroller.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
		outputMatrixScroller.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
		outputVectorScroller.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
		outputMatrixScroller.setBorder(null);
		outputVectorScroller.setBorder(null);

		
		temp = new JPanel();
		temp.add(outputVectorScroller);
		temp.add(outputMatrixScroller);
		bigPanel.add(temp);
		panelArray.add(bigPanel);
		
		// PANEL ZAPISYWANIA WYNIKU DO PLIKU
		saveButton = new JButton("Zapisz do pliku");
		saveButton.addActionListener(new saveButtonActionListener());
		
		temp = new JPanel();
		temp.add(saveButton);
		panelArray.add(temp);
		
		//WSZYSTEK PANELI DODANY DO GL PANELU
		for(JPanel lilpanel : panelArray){
			panel.add(lilpanel);
		}
		mastaPanel.add(panel);
		frame.add(mastaPanel);
		
		frame.setSize(850,586);
		frame.setBackground(Color.white);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setVisible(true);
		
	}
	
	public void file2Double(){
		TextConverter TC = new TextConverter();
		String matStr = "";
		
		try{
			FileReader openFR =  new FileReader(openFile);
			BufferedReader openBR = new BufferedReader(openFR);
			
			
			String line = null;
			while (( line = openBR.readLine()) != null) {
					matStr = matStr + line;
			}
			openBR.close();
		}catch(Exception ex){
			ex.printStackTrace();
		}
		TC.convertText(matStr);
		matDou = TC.getMatrix();
		vecDou = TC.getVector();
		
//		System.out.println(matDou[2][1]);
		
		for(int i =0; i< vecDou.length;i++){
			System.out.print(vecDou[i] + " ");
		}
		System.out.println();
		
		double[][] I = matDou;
		for(int i = 0; i<I.length; i++){
			for(int j = 0; j<I.length; j++){
				System.out.print(I[i][j]+", ");
			}
			System.out.println();
		}  
		
	}
	
	public void calculate(){
		helper = new SystemHelper(matDou,vecDou);
		helper.solveSystem();
		outputVectorTA.setText(dispVec(helper.getSolution(), getFormatInt()));
		outputMatrixTA.setText(dispMat(helper.getInverse(), getFormatInt()));
	}
	
	public int getFormatInt(){
		int i = 0;
		for(int j = 0;j<3;j++){
			if(formatJCB[j].isSelected()){
				i=j;
				break;
			}
		}
		return i;
	}
	
	public String dispMat(double[][] mat, int f){
		String r = "";
		if(f==0){
			for(double[] row : mat){
				for(double e : row){
					r=r+" "+String.format("%.2f", e);
				}
				r=r+"\n";
			}
		}else if(f==1){
			for(double[] row : mat){
				for(double e : row){
					r=r+" "+String.format("%.4f", e);
				}
				r=r+"\n";
			}
		}else{
			for(double[] row : mat){
				for(double e : row){
					r=r+" "+e;
				}
				r=r+"\n";
			}
		}
		
		
		return r;
	}
	
	public String dispVec(double[] vec, int f){
		String r= "";
		if(f==0){
			for(double e : vec){
				r=r+String.format("%.2f\n", e);
			}
		}else if(f==1){
			for(double e : vec){
				r=r+String.format("%.4f\n", e);
			}
		}else{
			for(double e : vec){
				r=r+e+"\n";
			}
		}
		return r;
	}
	
	class OpenButtonActionListener implements ActionListener{
		public void actionPerformed(ActionEvent e){
			chooser = new JFileChooser();
			chooser.setDialogTitle("Wybierz plik z ukladem");
			chooser.setApproveButtonText("Wybierz plik");
			int retval = chooser.showOpenDialog(frame);
			if( retval == JFileChooser.APPROVE_OPTION){
				openFile = chooser.getSelectedFile();
		
				fileNameTF.setText(openFile.getName());
				try{
					file2Double();
					inputMatrixTA.setText(dispMat(matDou,2));
					inputVectorTA.setText(dispVec(vecDou,2));
					outputMatrixTA.setText("");
					outputVectorTA.setText("");
				}catch(Exception ex){ex.printStackTrace();}
			}
		}
	}

	class CalcButtonActionListener implements ActionListener{
		public void actionPerformed(ActionEvent ev){
			try{
				calculate();
				
			}catch(Exception ex){ex.printStackTrace();}
			
		}
	}
	
	class saveButtonActionListener implements ActionListener{
		public void actionPerformed(ActionEvent ev){
			chooser = new JFileChooser();
			chooser.setDialogTitle("Wybierz lokalizacje i nazwe pliku");
			int retval = chooser.showSaveDialog(frame);
			if(retval == JFileChooser.APPROVE_OPTION){
				try{
					String temp = chooser.getSelectedFile().getName().replace(" ", "");
					FileWriter writer;
					if(temp.endsWith(".txt")){
						writer = new FileWriter(chooser.getSelectedFile());
					}else{
						writer = new FileWriter(chooser.getSelectedFile()+".txt");
					}
					
					writer.write(dispVec(helper.getSolution(), 2)+"\n\n"+dispMat(helper.getInverse(), 2));
					writer.close();
				}catch(Exception ex){ex.printStackTrace();}
			}
		}
	}
	
	class JCBOneItemListener implements ActionListener{
		public void actionPerformed(ActionEvent ev){
			formatJCB[1].setSelected(false);
			formatJCB[2].setSelected(false);
		}
	}
	
	class JCBTwoItemListener implements ActionListener{
		public void actionPerformed(ActionEvent ev){
			formatJCB[0].setSelected(false);
			formatJCB[2].setSelected(false);
		}
	}
	
	class JCBThreeActionListener implements ActionListener{
		public void actionPerformed(ActionEvent ev){
			formatJCB[1].setSelected(false);
			formatJCB[0].setSelected(false);
		}
	}
}
