
public class SystemHelper {
	private DecompHelper mainHelper;
	private DecompHelper detHelper;
	private double[] x;
	private double[] b;
	private double[][] L;
	private double[][] LT;
	private int size;
	
	public SystemHelper(double[][] A, double[] ba){
		if(checkSystem(A,b)){
			mainHelper = new DecompHelper(A);
			b = ba;
			size = mainHelper.getSize();
		}
	}
	
	public boolean checkSystem(double[][] A, double[] b){
		
		return isSymetrical(A) && checkSizes(A,b);
	}
	
/*	public boolean isPositive(double[][] A){
		boolean test = true;
		
		for(int i = 0; i<A.length; i++){
			double[][] temp = new double[i][i];
			temp = getMinor(A,i);
			if(getDet(temp) <=0){
				test = false;
				break;
			}
		}
		
		return test;
	}*/
	
	public double[][] getMinor(double[][] A, int n){
		double[][] temp = new double[n][n];
		for(int i = 0; i<n;i++){
			for(int j=0;j<n;j++){
				temp[i][j]=A[i][j];
			}
		}
		return temp;
	}
	
	
	public boolean checkSizes(double[][] A, double[] b){
		boolean test = true;
		int dim = b.length;
		if(dim != A.length)
			test = false;
		else{
			for(double row[] : A){
				if(dim != row.length){
					test = false;
					break;
				}
			}
		}
		return test;
	}
	
	public boolean isSymetrical(double[][] A){
		boolean test = true;
		boolean iBreak = false;
		for(int i = 0; i< A.length; i++){
			for( int j = 0; j<i;j++){
				if(A[i][j] != A[j][i]){
					iBreak=true;
					test =false;
					break;
				}
			}
			if(iBreak)
				break;
		}
		return test;
	}
	
	public void solveSystem(){
		mainHelper.decompMatrix();
		L = mainHelper.getL();
		LT = mainHelper.getLT();
		
		double[] y;
		
		y = lowerSolve(L,b);
		
		x = upperSolve(LT,y);
		
		
	}
	
	public double[] getSolution(){
		return x;
	}
	
	public double[] lowerSolve(double[][] L, double[] b){
		double[] r = new double[size];
		for(int i = 0; i<size; i++){
			double s=0;
			for(int j = 0; j<i; j++)
				s = s+r[j]*L[i][j];
			r[i] = (b[i] - s)/L[i][i];
		}
		return r;
	}
	
	public double[] upperSolve(double[][] LT, double[] b){
		double[] r = new double[size];
		for( int i = size - 1; i>-1; i--){
			double s = 0;
			for(int j = size-1; j>i; j--)
				s= s+r[j]*LT[i][j];
			r[i]=(b[i] -s)/LT[i][i];
		}
		return r;
	}
	
	public double[][] lowerInverse(double[][] L){
		double[][] R = new double[size][size];
		for(int i = 0; i< size; i++){
			for(int j = 0; j<i+1; j++){
				if(i!=j){
					double s = 0;
					for(int k=0;k<i;k++)
						s = s+ L[i][k]*R[k][j];
					R[i][j]=1/L[i][i]*s;
				}else{
					R[i][j]=1/L[i][j];
				}
			}
		}
		return R;
	}
	
	public double[][] matrixMulti(double[][] A, double[][] B){
		double[][] R = new double[size][size];
		for(int i = 0; i<size; i++){
			for(int j = 0; j<size; j++){
				for(int k = 0; k<size; k++){
					R[i][j] = R[i][j]+A[i][k]*B[k][j];
				}
			}
		}
		return R;
	}
	
	public double[][] getInverse(){		
		double[][] R = new double[size][size];
		for(int i = 0; i<size; i++){
			double[] temp = new double[size];
			temp[i]=1;
			double[] y = lowerSolve(L,temp);
			double[] x = upperSolve(LT,y);
			for(int j = 0; j<size; j++)
				R[j][i] = x[j];
		}
		return R;
	}
	
	
}
